{
  "info": {
    "name": "URL Shortener API",
    "description": "Postman collection for the URL Shortener service. Includes endpoints for creating short URLs, resolving, redirecting, viewing stats, and API documentation/schema.\n\nVariables:\n- base_url: Base URL of the running service (default http://localhost:8000).\n- short_code: Set automatically after a successful 'Shorten URL' request; used by other requests.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    { "key": "base_url", "value": "http://localhost:8000", "type": "string" },
    { "key": "short_code", "value": "", "type": "string" },
    { "key": "short_url", "value": "", "type": "string" }
  ],
  "item": [
    {
      "name": "Shorten URL (POST /api/shorten)",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"target_url\": \"https://example.com\",\n  \"ttl\": 60\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/shorten",
          "host": [ "{{base_url}}" ],
          "path": [ "api", "shorten" ]
        },
        "description": "Create a short URL. Accepts JSON or form data. Fields: target_url (required), ttl (optional). The short code is generated automatically. Returns 201 with short_id and short_url."
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Created (201)', function () { pm.response.to.have.status(201); });",
              "var json = {}; try { json = pm.response.json(); } catch (e) {}",
              "if (json && json.short_id) {",
              "  pm.collectionVariables.set('short_code', json.short_id);",
              "}",
              "if (json && json.short_url) {",
              "  pm.collectionVariables.set('short_url', json.short_url);",
              "}"
            ]
          }
        }
      ]
    },
    {
      "name": "Resolve (GET /api/resolve/{{short_code}})",
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{base_url}}/api/resolve/{{short_code}}",
          "host": [ "{{base_url}}" ],
          "path": [ "api", "resolve", "{{short_code}}" ]
        },
        "description": "Resolve a short code to its target URL. Returns { url, short_id }. 404 if not found, 410 if expired."
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('OK (200)', function () { pm.response.to.have.status(200); });"
            ]
          }
        }
      ]
    },
    {
      "name": "Redirect (GET /r/{{short_code}})",
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{base_url}}/r/{{short_code}}",
          "host": [ "{{base_url}}" ],
          "path": [ "r", "{{short_code}}" ]
        },
        "description": "HTTP redirect to the target URL for the given short code. 302 on success; 404 if not found; 410 if expired.",
        "protocolProfileBehavior": {
          "followRedirects": false
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Redirect (302)', function () { pm.response.to.have.status(302); });",
              "pm.test('Has Location header', function () { pm.expect(pm.response.headers.has('Location')).to.be.true; });"
            ]
          }
        }
      ]
    },
    {
      "name": "Stats (GET /stats/{{short_code}})",
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{base_url}}/stats/{{short_code}}",
          "host": [ "{{base_url}}" ],
          "path": [ "stats", "{{short_code}}" ]
        },
        "description": "Statistics for a given short code: hit_count, created_at, expires_at, expired, ttl_seconds_remaining, etc."
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('OK (200)', function () { pm.response.to.have.status(200); });"
            ]
          }
        }
      ]
    },
    {
      "name": "OpenAPI Schema (GET /api/schema/)",
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{base_url}}/api/schema/",
          "host": [ "{{base_url}}" ],
          "path": [ "api", "schema", "" ]
        },
        "description": "OpenAPI schema (JSON) generated by drf-spectacular."
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('OK (200)', function () { pm.response.to.have.status(200); });"
            ]
          }
        }
      ]
    },
    {
      "name": "Swagger UI (GET /api/docs/)",
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{base_url}}/api/docs/",
          "host": [ "{{base_url}}" ],
          "path": [ "api", "docs", "" ]
        },
        "description": "Swagger UI powered by drf-spectacular. Returns HTML."
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('OK (200)', function () { pm.response.to.have.status(200); });"
            ]
          }
        }
      ]
    }
  ]
}